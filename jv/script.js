// CONTACT //
// –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Å Callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
document.addEventListener('DOMContentLoaded', function() {
    const form = document.getElementById('feedbackForm');
    
    if (form) {
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            
            // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value; 
            const message = document.getElementById('message').value;
            
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (name.length < 2) {
                alert('Name must contain at least 2 characters');
                return;
            }
            
            if (!validateEmail(email)) {
                alert('Please enter a valid email address');
                return;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if (phone && !validatePhone(phone)) {
                alert('Please enter a valid phone number (e.g., +7-xxx-xxx-xx-xx or 8-xxx-xxx-xx-xx)');
                return;
            }
            
            if (message.length < 10) {
                alert('Message must contain at least 10 characters');
                return;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            showFormLoading(true);
            
            // –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = {
                name: name,
                email: email,
                phone: phone,
                message: message,
                timestamp: new Date().toISOString()
            };

            // Callback —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            function onSuccess(response) {
                console.log("‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", response);
                showFormLoading(false);
                showSuccessMessage();
                form.reset();
                playSound('success');
            }

            // Callback —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
            function onError(error) {
                console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
                showFormLoading(false);
                showErrorMessage();
                playSound('error');
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É —Å callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            submitContactForm(formData, onSuccess, onError);
        });
    }
});

// ===== CALLBACK –§–£–ù–ö–¶–ò–ò =====

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã (—Å–∏–º—É–ª—è—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
function submitContactForm(formData, successCallback, errorCallback) {
    console.log("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...", formData);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
    const submissionPromise = new Promise((resolve, reject) => {
        // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏ 2 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
    
            const isSuccess = Math.random() > 0.15;
            
            if (isSuccess) {
                resolve({
                    status: 'success',
                    messageId: 'msg_' + Date.now(),
                    timestamp: new Date().toLocaleString(),
                    data: formData
                });
            } else {
                reject({
                    status: 'error',
                    errorCode: 'NETWORK_ERROR',
                    message: 'Connection failed. Please try again.',
                    timestamp: new Date().toLocaleString()
                });
            }
        }, 2000);
    });

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    submissionPromise
        .then(result => {
            successCallback(result);
        })
        .catch(error => {
            errorCallback(error);
        });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function showFormLoading(show) {
    const submitBtn = document.querySelector('#feedbackForm button[type="submit"]');
    if (submitBtn) {
        if (show) {
            submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Sending...';
            submitBtn.disabled = true;
            submitBtn.classList.add('sending');
        } else {
            submitBtn.innerHTML = 'Send Message';
            submitBtn.disabled = false;
            submitBtn.classList.remove('sending');
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
function showSuccessMessage() {
    // –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π alert
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-success alert-dismissible fade show';
    alertDiv.innerHTML = `
        <strong>‚úÖ Success!</strong> Thank you! Your message has been sent. We will contact you soon.
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–æ–π
    const form = document.getElementById('feedbackForm');
    form.parentNode.insertBefore(alertDiv, form);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
function showErrorMessage() {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-danger alert-dismissible fade show';
    alertDiv.innerHTML = `
        <strong>‚ùå Error!</strong> Sorry, there was a problem sending your message. Please try again.
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    const form = document.getElementById('feedbackForm');
    form.parentNode.insertBefore(alertDiv, form);
    
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–≤—É–∫–æ–≤ (–¥–æ–±–∞–≤—å –∑–≤—É–∫–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É sounds/)
function playSound(type) {
    try {
        const audio = new Audio();
        switch(type) {
            case 'success':
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫ —É—Å–ø–µ—Ö–∞
                console.log("üîä Success sound played");
                break;
            case 'error':
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–≤—É–∫ –æ—à–∏–±–∫–∏
                console.log("üîä Error sound played");
                break;
        }
    } catch (e) {
        console.log("Sound not available:", e);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function validatePhone(phone) {
    const cleanedPhone = phone.replace(/[\s\(\)\-]/g, '');
    const phoneRegex = /^(\+7|8|7)?\d{10}$/;
    return phoneRegex.test(cleanedPhone);
}
// CART /

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã

    //  –§–£–ù–ö–¶–ò–Ø ADD TO CART
function addToCart(name, price) {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ Local Storage
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    // –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
    let item = cart.find(item => item.name === name);
    
    if (item) {
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        item.quantity += 1;
    } else {
        // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
        cart.push({ 
            name: name, 
            price: price, 
            quantity: 1 
        });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
    localStorage.setItem('cart', JSON.stringify(cart));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ—Ä–∑–∏–Ω—ã
    updateCartCounter();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å event)
    if (event && event.target) {
        animateAddToCart(event.target);
    }
    
 showSimpleNotification(`üõí ${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!`);
}

// ===== –ê–ù–ò–ú–ê–¶–ò–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ö–û–†–ó–ò–ù–£ =====
function animateAddToCart(button) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª–∏
    const originalText = button.innerHTML;
    const originalBackground = button.style.backgroundColor;
    
    // –ê–Ω–∏–º–∞—Ü–∏—è
    button.style.animation = 'bounce 0.5s';
    button.style.backgroundColor = '#28a745';
    button.innerHTML = '‚úÖ Added!';
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
        button.style.animation = '';
        button.style.backgroundColor = originalBackground;
        button.innerHTML = originalText;
    }, 1000);
}

// ===== –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –°–ß–ï–¢–ß–ò–ö –ö–û–†–ó–ò–ù–´ =====
function updateCartCounter() {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    let totalItems = cart.reduce((sum, item) => sum + item.quantity, 0);
    
    let cartLink = document.querySelector('a[href="cart.html"]');
    if (cartLink) {
        cartLink.innerHTML = totalItems > 0 ? `Cart üõí (${totalItems})` : 'Cart üõí';
        
        // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞
        if (totalItems > 0) {
            cartLink.style.animation = 'pulse 0.5s';
            setTimeout(() => {
                cartLink.style.animation = '';
            }, 500);
        }
    }
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
// –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
function displayCart() {
    let container = document.getElementById('cartItemsContainer');
    if (!container) return;
    
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    
    if (cart.length === 0) {
        container.innerHTML = '<p class="text-center">Your cart is empty</p>';
        updateSummary(cart);
        return;
    }
    
    let html = '';
    cart.forEach(item => {
        let total = item.price * item.quantity;
        html += `
            <div class="cart-item border-bottom pb-3 mb-3">
                <div class="row align-items-center">
                    <div class="col-6">
                        <h5>${item.name}</h5>
                        <p>${item.price} KZT √ó ${item.quantity}</p>
                    </div>
                    <div class="col-4">
                        <button class="btn btn-sm btn-outline-success" onclick="changeQty('${item.name}', -1)">-</button>
                        <span class="mx-2">${item.quantity}</span>
                        <button class="btn btn-sm btn-outline-success" onclick="changeQty('${item.name}', 1)">+</button>
                    </div>
                    <div class="col-2">
                        <button class="btn btn-danger btn-sm" onclick="removeItem('${item.name}')">√ó</button>
                    </div>
                </div>
            </div>
        `;
    });
    
    container.innerHTML = html;
    updateSummary(cart);
}

// –û–±–Ω–æ–≤–∏—Ç—å –∏—Ç–æ–≥–∏
function updateSummary(cart) {
    let total = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    let delivery = 1000;
    let final = total + delivery;
    let count = cart.reduce((sum, item) => sum + item.quantity, 0);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ ID
    document.getElementById('productsText').textContent = `Products (${count}):`;
    document.getElementById('productsTotal').textContent = `${total.toLocaleString()} KZT`;
    document.getElementById('deliveryCost').textContent = `${delivery.toLocaleString()} KZT`;
    document.getElementById('totalCost').textContent = `${final.toLocaleString()} KZT`;
}

// –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
function changeQty(name, change) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    let item = cart.find(item => item.name === name);
    
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            cart = cart.filter(i => i.name !== name);
        }
        localStorage.setItem('cart', JSON.stringify(cart));
        displayCart();
        updateCartCounter();
    }
}

// –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
function removeItem(name) {
    if (confirm(`Remove ${name}?`)) {
        let cart = JSON.parse(localStorage.getItem('cart')) || [];
        cart = cart.filter(item => item.name !== name);
        localStorage.setItem('cart', JSON.stringify(cart));
        displayCart();
        updateCartCounter();
    }
}

// –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
function checkout() {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    if (cart.length === 0) {
        alert('Cart is empty!');
        return;
    }
    document.getElementById('checkoutForm').style.display = 'block';
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
function cancelOrder() {
    document.getElementById('checkoutForm').style.display = 'none';
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
document.addEventListener('DOMContentLoaded', function() {
    let form = document.getElementById('orderForm');
    updateCartCounter();
    displayCart();
    
    if (form) {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            let name = document.getElementById('fullName').value;
            let phone = document.getElementById('phone').value;
            
            if (name.length < 2 || phone.length < 10) {
                alert('Please fill all fields correctly');
                return;
            }
            
            alert('üéâ Order confirmed! Thank you!');
            localStorage.removeItem('cart');
            updateCartCounter();
            displayCart();
            cancelOrder();
        });
    }
});

// –°–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
function changeBackgroundColor() {
    let colors = ['#fff', '#f8f9fa', '#e9ecef', '#d1e7dd'];
    document.body.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
}

// –í—Ä–µ–º—è –≤ —Ñ—É—Ç–µ—Ä–µ
function updateDateTime() {
    let element = document.getElementById('currentDateTime');
    if (element) {
        element.textContent = 'Current time: ' + new Date().toLocaleString();
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    updateDateTime();
    setInterval(updateDateTime, 60000);
});



// Task 3: Popup Subscription Form
document.addEventListener('DOMContentLoaded', function() {
    const subscriptionForm = document.getElementById('subscriptionForm');
    
    if (subscriptionForm) {
        subscriptionForm.addEventListener('submit', function(event) {
            event.preventDefault();
            
            const name = document.getElementById('subscriberName').value.trim();
            const email = document.getElementById('subscriberEmail').value.trim();
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
            if (name.length < 2) {
                alert('Please enter your name (at least 2 characters)');
                return;
            }
            
            // –í–∞–ª–∏–¥–∞—Ü–∏—è email
            if (!email || !validateEmail(email)) {
                alert('Please enter a valid email address');
                return;
            }
            
        
            alert(`Thank you ${name}! You've successfully subscribed to our newsletter.`);
            subscriptionForm.reset();
            
            
            const modal = bootstrap.Modal.getInstance(document.getElementById('subscriptionModal'));
            if (modal) {
                modal.hide();
            }
        });
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email 
function validateEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
}

// Task 4: Background Color Changer
function changeBackgroundColor() {
    const colors = ['#ffffff', '#f8f9fa', '#e9ecef', '#dee2e6', '#d1e7dd', '#ffe6e6', '#e6f3ff'];
    const randomColor = colors[Math.floor(Math.random() * colors.length)];
    document.body.style.backgroundColor = randomColor;
}

// Task 5: Current Date/Time Display
function updateDateTime() {
    const now = new Date();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    const date = now.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long', 
        day: 'numeric'
    });
    
    const time = now.toLocaleTimeString('en-US', {
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
    });
    
    const dateTimeString = `${date} ${time}`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ footer
    const dateTimeElement = document.getElementById('currentDateTime');
    if (dateTimeElement) {
        dateTimeElement.textContent = 'Current time: ' + dateTimeString;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
document.addEventListener('DOMContentLoaded', function() {
    updateDateTime();
    setInterval(updateDateTime, 1000); // –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
});


// ===== DAY/NIGHT THEME =====
function toggleTheme() {
    const body = document.body;
    const themeIcon = document.getElementById('themeIcon');
    
    if (body.classList.contains('dark-theme')) {
        // Switch to light theme
        body.classList.remove('dark-theme');
        themeIcon.textContent = 'üåô';
        localStorage.setItem('theme', 'light');
    } else {
        // Switch to dark theme
        body.classList.add('dark-theme');
        themeIcon.textContent = '‚òÄÔ∏è';
        localStorage.setItem('theme', 'dark');
    }
}

// Load saved theme on page load
document.addEventListener('DOMContentLoaded', function() {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
        document.getElementById('themeIcon').textContent = '‚òÄÔ∏è';
    }
});
// ===== READ MORE BUTTON =====
function toggleReadMore(button) {
    const description = button.closest('.product-description');
    const shortText = description.querySelector('.short-text');
    const fullText = description.querySelector('.full-text');
    const isExpanded = fullText.style.display === 'block';
    
    if (isExpanded) {
        // Collapse
        fullText.style.display = 'none';
        shortText.style.display = 'block';
        button.textContent = 'Read More ‚ñº';
    } else {
        // Expand
        fullText.style.display = 'block';
        shortText.style.display = 'none';
        button.textContent = 'Read Less ‚ñ≤';
    }
    
    
}
// ===== RESET FORM BUTTON =====
function resetContactForm() {
    document.querySelectorAll('#contactForm input, #contactForm textarea').forEach(input => {
        input.value = '';
    });
    alert('Form has been reset!');
    playSound('click');
}
// ===== KEYBOARD NAVIGATION =====
document.addEventListener('keydown', function(event) {
    const menuItems = document.querySelectorAll('.navbar-nav .nav-link');
    let currentIndex = -1;
    
    // –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    menuItems.forEach((item, index) => {
        if (document.activeElement === item) {
            currentIndex = index;
        }
    });
    
    switch(event.key) {
        case 'ArrowRight':
            event.preventDefault();
            currentIndex = (currentIndex + 1) % menuItems.length;
            menuItems[currentIndex].focus();
            playSound('click');
            break;
            
        case 'ArrowLeft':
            event.preventDefault();
            currentIndex = (currentIndex - 1 + menuItems.length) % menuItems.length;
            menuItems[currentIndex].focus();
            playSound('click');
            break;
            
        case 'Enter':
            if (document.activeElement.classList.contains('nav-link')) {
                event.preventDefault();
                document.activeElement.click();
                playSound('click');
            }
            break;
    }
});
// ===== PRODUCT FILTERING WITH SWITCH =====
function filterProducts(category) {
    const products = document.querySelectorAll('.product-card');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    document.querySelectorAll('.filters .btn').forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ switch statement
    products.forEach(product => {
        let showProduct = false;
        
        switch(category) {
            case 'all':
                showProduct = true;
                break;
                
            case 'jerseys':
                showProduct = product.querySelector('.card-title').textContent.includes('Jersey') || 
                             product.querySelector('.card-title').textContent.includes('Kit');
                break;
                
            case 'balls':
                showProduct = product.querySelector('.card-title').textContent.includes('Ball');
                break;
                
            case 'cleats':
                showProduct = product.querySelector('.card-title').textContent.includes('Cleats');
                break;
                
            case 'accessories':
                showProduct = product.querySelector('.card-title').textContent.includes('Socks') || 
                             product.querySelector('.card-title').textContent.includes('Guards');
                break;
                
            default:
                showProduct = true;
        }
        
        product.style.display = showProduct ? 'block' : 'none';
    });
    
    playSound('click');
}
// ===== PLAY SOUNDS - –¢–û–õ–¨–ö–û –ù–£–ñ–ù–´–ï –ó–í–£–ö–ò =====
function playSound(type) {
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        switch(type) {
            case 'addToCart':
                playBeepSound(audioContext, 1000, 0.3); // –ü—Ä–∏—è—Ç–Ω—ã–π –∑–≤—É–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                break;
                
            case 'success':
                playBeepSound(audioContext, 1200, 0.4); // –†–∞–¥–æ—Å—Ç–Ω—ã–π —É—Å–ø–µ—Ö
                break;
                
            default:
                return; // –ù–∏–∫–∞–∫–∏—Ö –¥—Ä—É–≥–∏—Ö –∑–≤—É–∫–æ–≤
        }
    } catch (e) {
        console.log("üîá Sounds not available");
    }
}

function playBeepSound(audioContext, frequency, duration) {
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    
    oscillator.frequency.value = frequency;
    oscillator.type = 'sine';
    
    gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration);
    
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + duration);
}

// ===== –ó–í–£–ö –ü–†–ò –î–û–ë–ê–í–õ–ï–ù–ò–ò –í –ö–û–†–ó–ò–ù–£ =====
function addToCart(name, price) {
    let cart = JSON.parse(localStorage.getItem('cart')) || [];
    let item = cart.find(item => item.name === name);
    
    if (item) {
        item.quantity += 1;
    } else {
        cart.push({ name: name, price: price, quantity: 1 });
    }
    
    localStorage.setItem('cart', JSON.stringify(cart));
    updateCartCounter();
    
    // üî• –ó–í–£–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í –ö–û–†–ó–ò–ù–£
    playSound('addToCart');
    
    alert(`‚úÖ ${name} added to cart!`);
}

// ===== –ó–í–£–ö –ü–†–ò –°–ú–ï–ù–ï –°–¢–†–ê–ù–ò–¶ =====
document.addEventListener('DOMContentLoaded', function() {
    console.log("üîä Sound system activated!");
    
    // –ó–≤—É–∫ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ (—Å–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü)
    document.querySelectorAll('.nav-link').forEach(link => {
        link.addEventListener('click', function() {
            playSound('success'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º success –∑–≤—É–∫ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü
        });
    });
});

// ===== –ó–í–£–ö –£–°–ü–ï–•–ê –î–õ–Ø –§–û–†–ú =====
// –í –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ success –∑–≤—É–∫
function onSuccess(response) {
    console.log("‚úÖ –§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", response);
    showFormLoading(false);
    showSuccessMessage();
    form.reset();
    playSound('success'); // –ó–≤—É–∫ —É—Å–ø–µ—Ö–∞
}

function onError(error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    showFormLoading(false);
    showErrorMessage();
    // –ë–ï–ó –ó–í–£–ö–ê –î–õ–Ø –û–®–ò–ë–ö–ò
}

// ===== –¢–ï–°–¢–û–í–ê–Ø –ö–ù–û–ü–ö–ê =====
function testSounds() {
    console.log("üîä Testing sounds...");
    playSound('addToCart');
    setTimeout(() => playSound('success'), 500);
}
// ===== SOUND TOGGLE SYSTEM =====
let soundEnabled = true;

function toggleSound() {
    soundEnabled = !soundEnabled;
    localStorage.setItem('soundEnabled', soundEnabled);
    
    const soundIcon = document.getElementById('soundIcon');
    if (soundIcon) {
        soundIcon.textContent = soundEnabled ? 'üîä' : 'üîá';
    }
    
    alert(soundEnabled ? "üîä Sound ON" : "üîá Sound OFF");
}

// ===== PLAY SOUNDS - –° –ü–†–û–í–ï–†–ö–û–ô =====
function playSound(type) {
    if (!soundEnabled) return; //
    
    try {
        const audioContext = new (window.AudioContext || window.webkitAudioContext)();
        
        switch(type) {
            case 'addToCart':
                playBeepSound(audioContext, 1000, 0.3);
                break;
            case 'success':
                playBeepSound(audioContext, 1200, 0.4);
                break;
            default:
                return;
        }
    } catch (e) {
        console.log("üîá Sounds not available");
    }
}

// ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
document.addEventListener('DOMContentLoaded', function() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∑–≤—É–∫–∞
    const savedSound = localStorage.getItem('soundEnabled');
    if (savedSound !== null) {
        soundEnabled = savedSound === 'true';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É
    const soundIcon = document.getElementById('soundIcon');
    if (soundIcon) {
        soundIcon.textContent = soundEnabled ? 'üîä' : 'üîá';
    }
    
    console.log("üîä Sound system ready:", soundEnabled ? "ON" : "OFF");
});

// ===== ASSIGNMENT 7: JQUERY TASKS =====

// Task 0: jQuery Ready Test
$(document).ready(function() {
    console.log("‚úÖ jQuery is ready and working!");
    
    // Task 4: Scroll Progress Bar
    initScrollProgressBar();
    
    // Task 1: jQuery Search
    initJquerySearch();
});

// ===== TASK 4: SCROLL PROGRESS BAR =====
function initScrollProgressBar() {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    $('body').prepend(`
        <div class="scroll-progress-container">
            <div class="scroll-progress-bar"></div>
        </div>
    `);
    
    const $progressBar = $('.scroll-progress-bar');
    
    $(window).on('scroll', function() {
        const windowHeight = $(window).height();
        const documentHeight = $(document).height();
        const scrollTop = $(window).scrollTop();
        
        const progress = (scrollTop / (documentHeight - windowHeight)) * 100;
        $progressBar.css('width', progress + '%');
        
        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if (progress < 33) {
            $progressBar.css('background', 'linear-gradient(90deg, #28a745, #20c997)');
        } else if (progress < 66) {
            $progressBar.css('background', 'linear-gradient(90deg, #20c997, #17a2b8)');
        } else {
            $progressBar.css('background', 'linear-gradient(90deg, #17a2b8, #6f42c1)');
        }
    });
}

// ===== TASK 1: JQUERY SEARCH =====
function initJquerySearch() {
    $('#searchInput').on('keyup', function() {
        const searchTerm = $(this).val().toLowerCase().trim();
        const $productCards = $('.product-card');
        let foundResults = false;

        $productCards.each(function() {
            const $card = $(this);
            const productName = $card.find('.card-title').text().toLowerCase();
            const productDescription = $card.find('.short-text').text().toLowerCase();
            
            if (productName.includes(searchTerm) || productDescription.includes(searchTerm)) {
                $card.show();
                foundResults = true;
            } else {
                $card.hide();
            }
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º/—Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        $('#noResults').toggle(!foundResults && searchTerm.length > 0);
    });
}

// ===== JQUERY FEATURES =====
$(document).ready(function() {
    console.log("‚úÖ jQuery is ready!");
    
    // –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    $('.number-counter').each(function() {
        const $this = $(this);
        const target = parseInt($this.data('target'));
        let current = 0;
        const increment = target / 100;
        
        const timer = setInterval(() => {
            current += increment;
            if (current >= target) {
                $this.text(target + '+');
                clearInterval(timer);
            } else {
                $this.text(Math.floor(current) + '+');
            }
        }, 20);
    });
    
    // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø—Ä–∏ —Å–∫—Ä–æ–ª–ª–µ
    $('body').prepend('<div class="scroll-progress"><div class="scroll-bar"></div></div>');
    $(window).scroll(function() {
        var scrollPercent = ($(window).scrollTop() / ($(document).height() - $(window).height())) * 100;
        $('.scroll-bar').css('width', scrollPercent + '%');
    });
});
// ===== JQUERY READY =====

$(document).ready(function() {
    console.log("‚úÖ jQuery is ready!");
    
    // Task 8: Copy to Clipboard
    initCopyToClipboard();
});

// ===== TASK 8: COPY TO CLIPBOARD =====
function initCopyToClipboard() {
    $('.copy-btn').on('click', function() {
        const textToCopy = $(this).data('text');
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
        navigator.clipboard.writeText(textToCopy).then(() => {
            // –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!"
            const originalText = $(this).html();
            $(this).html('‚úÖ Copied!');
            $(this).addClass('btn-success').removeClass('btn-outline-success');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                $(this).html(originalText);
                $(this).addClass('btn-outline-success').removeClass('btn-success');
            }, 2000);
            
        }).catch(err => {
            console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç');
        });
    });
}
// ===== TASK 6: LOADING SPINNER ON SUBMIT =====
function initLoadingSpinner() {
    $('#feedbackForm').on('submit', function(e) {
        e.preventDefault();
        
        const $submitBtn = $('#submitBtn');
        const $btnText = $submitBtn.find('.btn-text');
        const $spinner = $submitBtn.find('.spinner-border');
        
        console.log("üîÑ Form submission started");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä
        $btnText.text('Sending...');
        $spinner.removeClass('d-none');
        $submitBtn.prop('disabled', true);
        
        // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (2 —Å–µ–∫—É–Ω–¥—ã)
        setTimeout(() => {
            console.log("‚úÖ Form submission completed");
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            $btnText.text('Send Message');
            $spinner.addClass('d-none');
            $submitBtn.prop('disabled', false);
            
            // –¢–û–õ–¨–ö–û –û–î–ù–û —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            showJqueryNotification('‚úÖ Thank you! Your message has been sent successfully!', 'success');
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            $('#feedbackForm')[0].reset();
            
        }, 2000);
    });
}
$(document).ready(function() {
    console.log("‚úÖ jQuery is ready!");
    
    // Task 6: Loading Spinner
    initLoadingSpinner();
    
    // ... –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ...
});
// ===== TASK 2: SEARCH AUTOCOMPLETE =====
function initSearchAutocomplete() {
    const products = [
        "FC Barcelona Jersey",
        "Soccer Ball", 
        "Football Cleats",
        "Real Madrid Jersey",
        "Football Socks",
        "Shin Guards",
        "Barcelona",
        "Real Madrid", 
        "Nike",
        "Adidas",
        "Goalkeeper Gloves",
        "Jersey",
        "Cleats",
        "Ball",
        "Socks"
    ];
    
    $('#searchInput').on('input', function() {
        const searchTerm = $(this).val().toLowerCase().trim();
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        $('#autocomplete-suggestions').remove();
        
        if (searchTerm.length > 1) {
            const matches = products.filter(product => 
                product.toLowerCase().includes(searchTerm)
            ).slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 –ø–æ–¥—Å–∫–∞–∑–æ–∫
            
            if (matches.length > 0) {
                const $suggestions = $(`
                    <div id="autocomplete-suggestions" class="autocomplete-suggestions">
                        ${matches.map(match => `
                            <div class="suggestion-item" data-product="${match}">
                                üîç ${match}
                            </div>
                        `).join('')}
                    </div>
                `);
                
                $(this).parent().append($suggestions);
                
                // –ö–ª–∏–∫ –ø–æ –ø–æ–¥—Å–∫–∞–∑–∫–µ
                $('.suggestion-item').on('click', function() {
                    const product = $(this).data('product');
                    $('#searchInput').val(product);
                    $('#autocomplete-suggestions').remove();
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
                    $('#searchInput').trigger('keyup');
                });
            }
        }
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
    $(document).on('click', function(e) {
        if (!$(e.target).closest('#searchInput, #autocomplete-suggestions').length) {
            $('#autocomplete-suggestions').remove();
        }
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Escape
    $(document).on('keydown', function(e) {
        if (e.key === 'Escape') {
            $('#autocomplete-suggestions').remove();
        }
    });
}
$(document).ready(function() {
    console.log("‚úÖ jQuery is ready!");
    
    // Task 2: Search Autocomplete
    initSearchAutocomplete();
    
    // ... –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ ...
});
// ===== TASK 7: NOTIFICATION SYSTEM =====
function showJqueryNotification(message, type = 'success') {
    const colors = {
        success: '#28a745',
        error: '#dc3545', 
        warning: '#ffc107',
        info: '#17a2b8'
    };
    
    const icons = {
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è'
    };
    
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const $notification = $(`
        <div class="jquery-notification">
            <div class="notification-content">
                <span class="notification-icon">${icons[type]}</span>
                <span class="notification-text">${message}</span>
                <button class="notification-close">&times;</button>
            </div>
            <div class="notification-progress"></div>
        </div>
    `);
    
    $notification.css({
        'background': colors[type],
        'border-left': `4px solid ${colors[type]}`
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    $('body').append($notification);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    $notification.hide().slideDown(400);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    const autoRemove = setTimeout(() => {
        removeNotification($notification);
    }, 4000);
    
    // –ö–ª–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    $notification.find('.notification-close').on('click', function() {
        clearTimeout(autoRemove);
        removeNotification($notification);
    });
    
    // –ö–ª–∏–∫ –Ω–∞ –≤—Å—ë —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
    $notification.on('click', function(e) {
        if (!$(e.target).hasClass('notification-close')) {
            clearTimeout(autoRemove);
            removeNotification($notification);
        }
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function removeNotification($notification) {
    $notification.slideUp(300, function() {
        $(this).remove();
    });
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–∑–æ–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showSuccessNotification(message) {
    showJqueryNotification(message, 'success');
}

function showErrorNotification(message) {
    showJqueryNotification(message, 'error');
}

function showWarningNotification(message) {
    showJqueryNotification(message, 'warning');
}

function showInfoNotification(message) {
    showJqueryNotification(message, 'info');
}